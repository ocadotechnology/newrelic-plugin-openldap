#! /usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'net/ldap'

require 'newrelic_plugin'

module OpenLDAPAgent

  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid 'com.ocadotechnology.newrelic.openldap'
    agent_version '0.0.3'
    agent_config_options :name, :host, :port, :dn, :password, :server_id, :replication_base, :replication_providers
    agent_human_labels('OpenLDAP') { name }

    def setup_metrics
      @total_connections = NewRelic::Processor::EpochCounter.new
      @operations_initiated = NewRelic::Processor::EpochCounter.new
      @operations_completed = NewRelic::Processor::EpochCounter.new
      @bind_operations_initiated = NewRelic::Processor::EpochCounter.new
      @bind_operations_completed = NewRelic::Processor::EpochCounter.new
      @unbind_operations_initiated = NewRelic::Processor::EpochCounter.new
      @unbind_operations_completed = NewRelic::Processor::EpochCounter.new
      @search_operations_initiated = NewRelic::Processor::EpochCounter.new
      @search_operations_completed = NewRelic::Processor::EpochCounter.new
      @compare_operations_initiated = NewRelic::Processor::EpochCounter.new
      @compare_operations_completed = NewRelic::Processor::EpochCounter.new
      @modify_operations_initiated = NewRelic::Processor::EpochCounter.new
      @modify_operations_completed = NewRelic::Processor::EpochCounter.new
      @modrdn_operations_initiated = NewRelic::Processor::EpochCounter.new
      @modrdn_operations_completed = NewRelic::Processor::EpochCounter.new
      @add_operations_initiated = NewRelic::Processor::EpochCounter.new
      @add_operations_completed = NewRelic::Processor::EpochCounter.new
      @delete_operations_initiated = NewRelic::Processor::EpochCounter.new
      @delete_operations_completed = NewRelic::Processor::EpochCounter.new
      @abandon_operations_initiated = NewRelic::Processor::EpochCounter.new
      @abandon_operations_completed = NewRelic::Processor::EpochCounter.new
      @extended_operations_initiated = NewRelic::Processor::EpochCounter.new
      @extended_operations_completed = NewRelic::Processor::EpochCounter.new
      @bytes = NewRelic::Processor::EpochCounter.new
      @pdus = NewRelic::Processor::EpochCounter.new
      @entries = NewRelic::Processor::EpochCounter.new
      @referrals = NewRelic::Processor::EpochCounter.new
    end

    def poll_cycle
      stats = get_openldap_status
    end

    def get_csns(ldap)
      ldap.search(:base => replication_base, :attributes => ['contextCSN'], :return_result => true, :scope => Net::LDAP::SearchScope_BaseObject) do |entry|
        csn_entries = {}
        entry['contextcsn'].each do |csn_entry|
          string_time, _, hex_server_id, _ = csn_entry.split('#')
          csn_entries[hex_server_id.to_i(16).to_s(10)] = Time.parse(string_time).to_f
        end
        return csn_entries
      end
    end

    def get_openldap_status
      begin
        ldap = Net::LDAP.new(
          :encryption => {
            :method => :start_tls,
          },
          :host => host,
          :port => port,
          :auth => {
            :method => :simple,
            :username => dn,
            :password => password,
          },
        )
      rescue Exception => e
        puts "Failed to connect to ldap: #{e}"
      end
      data = {}

      ldap.search(:base => 'cn=monitor', :attributes => ['*', '+']) do |entry|
        data[entry.dn] = entry
      end

      report_metric "Connections/Total", "Connections/second", @total_connections.process(data['cn=Total,cn=Connections,cn=Monitor']['monitorcounter'][0].to_i)
      report_metric "Connections/Current", "Connections", data['cn=Current,cn=Connections,cn=Monitor']['monitorcounter'][0].to_i

      report_metric 'Summary/Operations/Initiated', 'Operations/second', @operations_initiated.process(data['cn=Operations,cn=Monitor']['monitorOpInitiated'][0].to_i)
      report_metric 'Summary/Operations/Completed', 'Operations/second', @operations_completed.process(data['cn=Operations,cn=Monitor']['monitorOpCompleted'][0].to_i)
      report_metric 'Operations/Initiated/Bind', 'Operations/second', @bind_operations_initiated.process(data['cn=Bind,cn=Operations,cn=Monitor']['monitorOpInitiated'][0].to_i)
      report_metric 'Operations/Completed/Bind', 'Operations/second', @bind_operations_completed.process(data['cn=Bind,cn=Operations,cn=Monitor']['monitorOpCompleted'][0].to_i)
      report_metric 'Operations/Initiated/Unbind', 'Operations/second', @unbind_operations_initiated.process(data['cn=Unbind,cn=Operations,cn=Monitor']['monitorOpInitiated'][0].to_i)
      report_metric 'Operations/Completed/Unbind', 'Operations/second', @unbind_operations_completed.process(data['cn=Unbind,cn=Operations,cn=Monitor']['monitorOpCompleted'][0].to_i)
      report_metric 'Operations/Initiated/Search', 'Operations/second', @search_operations_initiated.process(data['cn=Search,cn=Operations,cn=Monitor']['monitorOpInitiated'][0].to_i)
      report_metric 'Operations/Completed/Search', 'Operations/second', @search_operations_completed.process(data['cn=Search,cn=Operations,cn=Monitor']['monitorOpCompleted'][0].to_i)
      report_metric 'Operations/Initiated/Compare', 'Operations/second', @compare_operations_initiated.process(data['cn=Compare,cn=Operations,cn=Monitor']['monitorOpInitiated'][0].to_i)
      report_metric 'Operations/Completed/Compare', 'Operations/second', @compare_operations_completed.process(data['cn=Compare,cn=Operations,cn=Monitor']['monitorOpCompleted'][0].to_i)
      report_metric 'Operations/Initiated/Modify', 'Operations/second', @modify_operations_initiated.process(data['cn=Modify,cn=Operations,cn=Monitor']['monitorOpInitiated'][0].to_i)
      report_metric 'Operations/Completed/Modify', 'Operations/second', @modify_operations_completed.process(data['cn=Modify,cn=Operations,cn=Monitor']['monitorOpCompleted'][0].to_i)
      report_metric 'Operations/Initiated/Modrdn', 'Operations/second', @modrdn_operations_initiated.process(data['cn=Modrdn,cn=Operations,cn=Monitor']['monitorOpInitiated'][0].to_i)
      report_metric 'Operations/Completed/Modrdn', 'Operations/second', @modrdn_operations_completed.process(data['cn=Modrdn,cn=Operations,cn=Monitor']['monitorOpCompleted'][0].to_i)
      report_metric 'Operations/Initiated/Add', 'Operations/second', @add_operations_initiated.process(data['cn=Add,cn=Operations,cn=Monitor']['monitorOpInitiated'][0].to_i)
      report_metric 'Operations/Completed/Add', 'Operations/second', @add_operations_completed.process(data['cn=Add,cn=Operations,cn=Monitor']['monitorOpCompleted'][0].to_i)
      report_metric 'Operations/Initiated/Delete', 'Operations/second', @delete_operations_initiated.process(data['cn=Delete,cn=Operations,cn=Monitor']['monitorOpInitiated'][0].to_i)
      report_metric 'Operations/Completed/Delete', 'Operations/second', @delete_operations_completed.process(data['cn=Delete,cn=Operations,cn=Monitor']['monitorOpCompleted'][0].to_i)
      report_metric 'Operations/Initiated/Abandon', 'Operations/second', @abandon_operations_initiated.process(data['cn=Abandon,cn=Operations,cn=Monitor']['monitorOpInitiated'][0].to_i)
      report_metric 'Operations/Completed/Abandon', 'Operations/second', @abandon_operations_completed.process(data['cn=Abandon,cn=Operations,cn=Monitor']['monitorOpCompleted'][0].to_i)
      report_metric 'Operations/Initiated/Extended', 'Operations/second', @extended_operations_initiated.process(data['cn=Extended,cn=Operations,cn=Monitor']['monitorOpInitiated'][0].to_i)
      report_metric 'Operations/Completed/Extended', 'Operations/second', @extended_operations_completed.process(data['cn=Extended,cn=Operations,cn=Monitor']['monitorOpCompleted'][0].to_i)
      report_metric 'Statistics/Bytes', 'Bytes/second', @bytes.process(data['cn=Bytes,cn=Statistics,cn=Monitor']['monitorcounter'][0].to_i)
      report_metric 'Statistics/PDU', 'PDUs/second', @pdus.process(data['cn=PDU,cn=Statistics,cn=Monitor']['monitorcounter'][0].to_i)
      report_metric 'Statistics/Entries', 'Entries/second', @entries.process(data['cn=Entries,cn=Statistics,cn=Monitor']['monitorcounter'][0].to_i)
      report_metric 'Statistics/Referrals', 'Referrals/second', @referrals.process(data['cn=Referrals,cn=Statistics,cn=Monitor']['monitorcounter'][0].to_i)
      report_metric 'Threads/Open', 'Threads', data['cn=Open,cn=Threads,cn=Monitor']['monitoredInfo'][0].to_i
      report_metric 'Threads/Starting', 'Threads', data['cn=Starting,cn=Threads,cn=Monitor']['monitoredInfo'][0].to_i
      report_metric 'Threads/Active', 'Threads', data['cn=Active,cn=Threads,cn=Monitor']['monitoredInfo'][0].to_i
      report_metric 'Threads/Pending', 'Threads', data['cn=Pending,cn=Threads,cn=Monitor']['monitoredInfo'][0].to_i
      report_metric 'Summary/Waiters', 'Waiters', data['cn=Read,cn=Waiters,cn=Monitor']['monitorcounter'][0].to_i + data['cn=Write,cn=Waiters,cn=Monitor']['monitorcounter'][0].to_i
      report_metric 'Waiters/Read', 'Waiters', data['cn=Read,cn=Waiters,cn=Monitor']['monitorcounter'][0].to_i
      report_metric 'Waiters/Write', 'Waiters', data['cn=Write,cn=Waiters,cn=Monitor']['monitorcounter'][0].to_i

      # Report on replication status
      if server_id and replication_providers and replication_base
        maximum_csns = Hash.new(0)
        replication_providers.each do |provider_hostname|
          begin
             provider = Net::LDAP.new(
              :encryption => {
                :method => :start_tls,
              },
              :host => provider_hostname,
              :port => port,
              :auth => {
                :method => :simple,
                :username => dn,
                :password => password,
              },
            )
            provider_csns = get_csns(provider)
            provider_csns.each do |key, value|
              maximum_csns[key] = [maximum_csns[key], value].max
            end
          rescue Exception => e
            puts "Failed to connect to provider #{provider_hostname}: #{e}"
          end
        end

        consumer_csns = get_csns(ldap)

        deltas = {}
        consumer_csns.each do |key, value|
          if key.to_i != server_id.to_i
            # We want to make it minimum 0, if we ask the consumer after the producer
            # it's possible that there was an update in the meantime that's already replicated
            # and we're happy with that.
            deltas[key] = [0, maximum_csns[key] - consumer_csns[key]].max
          end
        end

        deltas.each do |key, value|
          report_metric "Replication Delay/Server ID/#{key}", 'Seconds', value
        end
        report_metric 'Replication Delay/Summary', 'Seconds', deltas.values.max
      end

    end

  end

  NewRelic::Plugin::Setup.install_agent :openldap_agent, self

  NewRelic::Plugin::Run.setup_and_run

end
